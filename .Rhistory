}
}
##  Spearman
roc_tmp <- roc(response = response_label[-((30*i-9):(30*i))],
predictor = t(cor_mat)[-((30*i-9):(30*i)),2*i], quite = T)
source("~/Dropbox/cell_comp_spatial/analysis/Cluster/Spatial/Simulation.R", echo=TRUE)
source("~/Dropbox/cell_comp_spatial/analysis/Cluster/Spatial/Simulation.R", echo=TRUE)
View(nb_param_mat)
View(simulate_expr)
for(i in 1:n_gene){
simulate_expr[,i] <- probalized(simulate_expr[,i])
}
colSums(simulate_expr)
View(simulate_expr)
View(param)
View(nb_param_mat)
View(param)
BiocManager::install("clusterProfiler")
head(replicate(50000, rnorm(120, 170, 10)))
dim(replicate(50000, rnorm(120, 170, 10)))
A <- replicate(50000, rnorm(120, 170, 10))
dim(A)
hist(colMeans(A))
res <- apply(A, 2, function(X){(170 > mean(X) - 1.96*sd(X)) * (170 < mean(X) + 1.96*sd(X))})
sum(res)
set.seed(1)
A <- replicate(50000, rnorm(120, 170, 100))
hist(colMeans(A))
res <- apply(A, 2, function(X){(170 > mean(X) - 1.96*sd(X)) * (170 < mean(X) + 1.96*sd(X))})
sum(res)
set.seed(1)
A <- replicate(50000, rnorm(120, 170, 10))
hist(colMeans(A))
res <- apply(A, 2, function(X){(170 > mean(X) - 1.96*sd(X)) * (170 < mean(X) + 1.96*sd(X))})
sum(res)
res <- apply(A, 2, function(X){(170 > mean(X) - 1.96*sd(X)/120) * (170 < mean(X) + 1.96*sd(X)/120)})
sum(res)
sum(res) / 50000
set.seed(1)
A <- replicate(50000, rnorm(120, 170, 10))
hist(colMeans(A))
res <- apply(A,
2,
function(X){(170 > mean(X) - 1.96*sd(X)/sqrt(120)) * (170 < mean(X) + 1.96*sd(X)/sqrt(120))})
sum(res) / 50000
sum(res)
library(tidyverse)
A <- data.frame(X = 1:10, y = 10:1)
class(A)
is.object(A)
library(sloop)
install.packages("sloop")
library(sloop)
otype(A)
methods(print)
a < - list(name="Adam", Roll_No=15)
a <- list(name="Adam", Roll_No=15)
class(a) < - "Student"
class(a) <- "Student"
View(a)
View(a)
print.Student <- function(a){
cat(a@name)
}
print(a)
print.Student <- function(a){
cat(a$name)
}
print(a)
pi*(55/2)^2
pi*(55/2)^2 / (20^2)
library(tidyverse)
library(Seurat)
library(SPER)
library(umap)
library(lsa)
library(FNN)
library(pheatmap)
library(gridExtra)
# library(comma)
library(sp)
library(gstat)
library(stats)
suppressMessages(library(spatstat))
source("func.R")
##  Load scRNA-seq & ST data
####  ST data
{
ST_data <- Load10X_Spatial("../data/OVCA_Visium/",
"CytAssist_11mm_FFPE_Human_Ovarian_Carcinoma_filtered_feature_bc_matrix.h5")
ST_data <- SCTransform(ST_data, assay = "Spatial")
SpatialFeaturePlot(ST_data, features = "nCount_Spatial")
# SpatialFeaturePlot(ST_data, features = "nCount_Spatial") + theme(legend.position = "right")
ST_data <- AddMetaData(ST_data, "imagerow",
metadata = ST_data@images[["slice1"]]@coordinates$imagerow)
ST_data <- AddMetaData(ST_data, "imagecol",
metadata = ST_data@images[["slice1"]]@coordinates$imagecol)
SpatialDimPlot(ST_data, cells.highlight = WhichCells(ST_data,
expression = imagecol > 5000 & imagecol < 50000))
SpatialDimPlot(ST_data, cells.highlight = WhichCells(ST_data,
expression = imagerow > 1000 & imagerow < 50000))
}
##  Limit ST data to a given region
{
ST_data <- subset(ST_data, imagecol < 5000 | imagecol > 50000, invert = TRUE)
ST_data <- subset(ST_data, imagerow < 1000 | imagerow > 50000, invert = TRUE)
SpatialFeaturePlot(ST_data, features = "nCount_Spatial") + theme(legend.position = "right")
# ST_data <- FindVariableFeatures(ST_data, selection.method = "vst", nfeatures = 2000)
ST_data_count <- GetAssayData(ST_data)
rownames(ST_data_count) <- sub("-", "_", rownames(ST_data_count))
}
##  Feature selection: markers, or high expression genes
{
mdl <- names(sort(rowSums(ST_data_count), decreasing = T))
mdl <- mdl[1:700]
########  Load markers
marker_mat <- read.table("../data/scRNA_state_marker.txt", sep = "\t")
marker_mat <- marker_mat %>%
filter(p_val_adj < 0.01)
rownames(marker_mat) <- sub("-", "_", rownames(marker_mat))
marker_mat$gene <- sub("-", "_", marker_mat$gene)
marker_mat$gene <- as.factor(marker_mat$gene)
marker_list <- marker_mat %>%
filter(cluster %in% c("Stress", "Cycle", "Interferon")) %>%
select(gene)
}
##  Filter the data based on features
ST_impute_data <- ST_data_count
ST_impute_data <- as.data.frame(t(as.matrix(ST_impute_data)))
ST_complete_data <- as.data.frame(t(as.matrix(ST_data_count)))
##  Load scRNA-seq & ST data
####  ST data
{
ST_data <- Load10X_Spatial("../data/OVCA_Visium/",
"CytAssist_11mm_FFPE_Human_Ovarian_Carcinoma_filtered_feature_bc_matrix.h5")
ST_data <- SCTransform(ST_data, assay = "Spatial")
SpatialFeaturePlot(ST_data, features = "nCount_Spatial")
# SpatialFeaturePlot(ST_data, features = "nCount_Spatial") + theme(legend.position = "right")
ST_data <- AddMetaData(ST_data, "imagerow",
metadata = ST_data@images[["slice1"]]@coordinates$imagerow)
ST_data <- AddMetaData(ST_data, "imagecol",
metadata = ST_data@images[["slice1"]]@coordinates$imagecol)
SpatialDimPlot(ST_data, cells.highlight = WhichCells(ST_data,
expression = imagecol > 5000 & imagecol < 50000))
SpatialDimPlot(ST_data, cells.highlight = WhichCells(ST_data,
expression = imagerow > 1000 & imagerow < 50000))
}
library(tidyverse)
library(SPER)
library(sp)
library(gstat)
library(ape)
library(pheatmap)
source("func.R")
source("../../Decomposition/src/func.R")
merfish_data <- read_csv("../data/Moffitt_and_Bambah-Mukku_et_al_merfish_all_cells.csv")
install.packages("gpclib")
# install.packages("gpclib")
library(gpclib)
??awv
A <- matrix(rnorm(60), nrow = 10, ncol = 6)
cor_A <- cor(A)
cor_A <- cor(t(A))
View(cor_A)
library(pheatmap)
pheatmap(cor_A,
treeheight_row = 0,
treeheight_col = 0)
mds_A <- cmdscale(cor_A, k = 2)
View(mds_A)
dist_A <- dist(A)
dist_A
mds_A <- cmdscale(dist_A, k = 2)
View(mds_A)
library(ggplot2)
ggplot(data = mds_A) +
geom_point(aes(x = V1, y = V2)) +
theme_bw()
ggplot(data = as.data.frame(mds_A)) +
geom_point(aes(x = V1, y = V2)) +
theme_bw()
A <- matrix(rnorm(300), nrow = 30, ncol = 10)
cor_A <- cor(t(A))
pheatmap(cor_A,
treeheight_row = 0,
treeheight_col = 0)
dist_A <- dist(A)
mds_A <- cmdscale(dist_A, k = 2)
ggplot(data = as.data.frame(mds_A)) +
geom_point(aes(x = V1, y = V2)) +
theme_bw()
set.seed(1111)
A <- matrix(rnorm(300), nrow = 30, ncol = 10)
cor_A <- cor(t(A))
pheatmap(cor_A,
treeheight_row = 0,
treeheight_col = 0)
dist_A <- dist(A)
mds_A <- cmdscale(dist_A, k = 2)
ggplot(data = as.data.frame(mds_A)) +
geom_point(aes(x = V1, y = V2)) +
theme_bw()
dist_A
pheatmap(dist(A, upper = T),
treeheight_row = 0,
treeheight_col = 0)
set.seed(1234)
A <- matrix(rnorm(300), nrow = 30, ncol = 10)
cor_A <- cor(t(A))
pheatmap(dist(A, upper = T),
treeheight_row = 0,
treeheight_col = 0)
dist_A <- dist(A)
mds_A <- cmdscale(dist_A, k = 2)
ggplot(data = as.data.frame(mds_A)) +
geom_point(aes(x = V1, y = V2)) +
theme_bw()
set.seed(1234)
A <- matrix(rnorm(120), nrow = 12, ncol = 10)
cor_A <- cor(t(A))
pheatmap(dist(A, upper = T),
treeheight_row = 0,
treeheight_col = 0)
dist_A <- dist(A)
mds_A <- cmdscale(dist_A, k = 2)
ggplot(data = as.data.frame(mds_A)) +
geom_point(aes(x = V1, y = V2)) +
theme_bw()
summary(mds_A[,1])
summary(mds_A[,2])
max(mds_A)
ceiling(max(mds_A))
dist(matrix(1:10, ncol = 2))
matrix(1:10, ncol = 2)
dist(matrix(1:10, ncol = 2))[,1]
dist(matrix(1:10, ncol = 2))
install.packages("Rfast")
library(Rfast)
transformFunction <- function(x,
X){
res <- dista(x, X)
return(res)
}
transformFunction(c(0.6, 2.3), matrix(1:10, ncol = 2))
transformFunction(c(0.6, 2.3), matrix(1:20, ncol = 2))
matrix(1:20, ncol = 2)
c(0.6, 2.3)
transformFunction <- function(x,
X){
res <- dista(x, X)
return(res)
}
transformFunction(c(0.6, 2.3), matrix(1:20, ncol = 2))
transformFunction(c(0.6, 2.3, 0.4, 1.2), matrix(1:20, ncol = 4))
transformFunction(t(c(0.6, 2.3, 0.4, 1.2)), matrix(1:20, ncol = 4))
transformFunction(t(c(0.6, 2.3)), matrix(1:20, ncol = 2))
transformFunction((c(0.6, 2.3)), matrix(1:20, nrow = 2))
transformFunction(t(c(0.6, 2.3)), matrix(1:20, ncol = 2))
transformFunction <- function(x,
X,
method = "euclidean"){
res <- dista(x, X, type = method)
return(res)
}
transformFunction(t(c(0.6, 2.3)), matrix(1:20, ncol = 2))
transformFunction(t(c(0.6, 2.3)), matrix(1:20, ncol = 2), "manhattan")
library(tidyverse)
library(Seurat)
library(SPER)
library(umap)
library(lsa)
library(FNN)
library(pheatmap)
library(RColorBrewer)
library(gridExtra)
# library(comma)
library(sp)
library(gstat)
library(stats)
suppressMessages(library(spatstat))
source("func.R")
##  Load scRNA-seq & ST data
####  ST data
{
# ST_data <- readRDS("../data/UhOVC1/UhOVC1_Seurat.rds")
ST_data <- readRDS("../data/UhOVC5/UhOVC5_Seurat.rds")
SpatialFeaturePlot(ST_data, features = "nCount_SCT")
# SpatialFeaturePlot(ST_data, features = "nCount_Spatial") + theme(legend.position = "right")
ST_data <- AddMetaData(ST_data, "imagerow",
metadata = ST_data@images[["UhOVC5"]]@coordinates$imagerow)
ST_data <- AddMetaData(ST_data, "imagecol",
metadata = ST_data@images[["UhOVC5"]]@coordinates$imagecol)
SpatialDimPlot(ST_data, cells.highlight = WhichCells(ST_data,
expression = imagecol > 7000 & imagecol < 12000))
SpatialDimPlot(ST_data, cells.highlight = WhichCells(ST_data,
expression = imagerow > 10000 & imagerow < 15000))
ST_data_raw <- ST_data
}
##  Limit ST data to a given region
{
######### UhOVC1 sub-region
# ST_data <- subset(ST_data, imagecol < 15000 | imagecol > 23500, invert = TRUE)
# ST_data <- subset(ST_data, imagerow < 15500 | imagerow > 24000, invert = TRUE)
######### UhOVC5 sub-region
ST_data <- subset(ST_data, imagecol < 7000 | imagecol > 12000, invert = TRUE)
ST_data <- subset(ST_data, imagerow < 10000 | imagerow > 15000, invert = TRUE)
SpatialFeaturePlot(ST_data, features = "nCount_Spatial") + theme(legend.position = "right")
ST_data <- FindVariableFeatures(ST_data, selection.method = "vst", nfeatures = 2000)
ST_data_count <- GetAssayData(ST_data)
rownames(ST_data_count) <- sub("-", "_", rownames(ST_data_count))
}
##  Feature selection: markers, or high expression genes
{
# mdl <- names(sort(rowSums(ST_data_count), decreasing = T))
# mdl <- mdl[1:500]
########  Load markers
##  State markers, may use later
module_mat <- read.table("../data/Module_gene_list.txt", sep = "\t", header = T)
##  Cell type marker
marker_mat <- read.table("../data/Markers/scRNA_population_marker.txt", sep = "\t")
marker_mat <- marker_mat %>%
filter(p_val_adj < 0.01)
rownames(marker_mat) <- sub("-", "_", rownames(marker_mat))
marker_mat$gene <- sub("-", "_", marker_mat$gene)
marker_mat$gene <- as.factor(marker_mat$gene)
marker_list <- marker_mat %>%
filter(cluster %in% c("Malignant")) %>%
select(gene)
}
##  Moran's I
{
ST_complete_data <- as.data.frame(t(as.matrix(ST_data_count)))
MI_mat <- read.table("../data/OVCA3_processed/Moran's I.txt", sep = "\t")
MI_mat$adj.p <- MI_mat$p.value * nrow(MI_mat)
MI_mat$adj.p[which(MI_mat$adj.p >= 1)] <- 1
MI_mat$adj.p[which(MI_mat$adj.p < 1e-12)] <- 1e-12
MI_mat$Significance <- as.factor(as.numeric(MI_mat$adj.p < 0.01))
##  Sparsity
MI_mat$Sparsity <- apply(ST_complete_data, 2, function(x){sum(x == 0) / length(x)})
##  Mean Expression
MI_mat$MeanExpr <- apply(ST_complete_data, 2, mean)
}
##  Filter the data based on features
{
ST_impute_data <- ST_data_count[intersect(module_mat$Gene_ID, rownames(ST_data_count)),]
ST_impute_data <- as.data.frame(t(as.matrix(ST_impute_data)))
marker_w_moran <- intersect(colnames(ST_impute_data),
rownames(MI_mat %>% filter(Significance == 1) %>% filter(Sparsity < 0.5)))
MI_filtered_module_gene <- module_mat[which(module_mat$Gene_ID %in% marker_w_moran),]
ST_impute_data <- ST_impute_data[,marker_w_moran]
# write.table(apply(ST_impute_data, 2, function(x){x / sum(x)}),
#             "../data/OVCA3_processed/OVCA3_Spot_expr.txt", sep = "\t", quote = F)
}
##  Coordinates
{
coordinates_tmp <- read.table("../Data/UhOVC5/spatial/tissue_positions_list.csv",
header = F,
sep = ",",
stringsAsFactors = F)
coordinates <- coordinates_tmp[,5:6]
rownames(coordinates) <- coordinates_tmp[,1]
colnames(coordinates) <- c("imagerow", "imagecol")
coordinates <- coordinates[rownames(ST_impute_data),]
coordinates$imagerow <- min(coordinates$imagerow) + max(coordinates$imagerow) - coordinates$imagerow
um_scale <- 55 / 210.06
coordinates <- coordinates * um_scale
}
0.0067^2 * 148.4
0.0067^2 * 148.4 * 3
0.0067^2 * 148.4 * (-4)
(1/0.0067)^2 * 148.4 * 3
(-1/149.4)^2 * 148.4 * 3
-(-1/149.4)^2 * 148.4 * 3
(-1/149.4)^2 * 148.4 * 4
library(tidyverse)
library(rjson)
json_dat <- fromJSON(file = "../data/TWWStat.json", simplify = T)
##  Factions
factions_df <- data.frame(matrix(0, nrow = 1, ncol = 6))
for(i in 1:length(json_dat)){
if(length(json_dat[[i]][['factions']]) == 0){
factions_df <- rbind(factions_df, c("None", "None", "None", "None", "None", json_dat[[i]][['key']]))
next
}
if(length(json_dat[[i]][['factions']]) > 1){
fac_l <- length(json_dat[[i]][['factions']])
tmp <- t(matrix(unlist(json_dat[[i]][['factions']]), ncol = fac_l))
tmp <- cbind(tmp, json_dat[[i]][['key']])
colnames(tmp) <- c("X1", "X2","X3","X4","X5","X6")
factions_df <- rbind(factions_df, tmp)
next
}
tmp <- c(unlist(json_dat[[i]][['factions']]), json_dat[[i]][['key']])
factions_df <- rbind(factions_df, tmp)
}
factions_df <- factions_df[-1,]
colnames(factions_df) <- c(names(json_dat[[1]][['factions']][[1]]), "key")
setwd("Desktop/Yanai Lab/Project/")
devtools::create("CancerAbstract")
library(tidyverse)
library(Seurat)
library(SPER)
library(umap)
library(lsa)
library(FNN)
library(pheatmap)
library(RColorBrewer)
library(gridExtra)
# library(comma)
library(sp)
library(gstat)
library(stats)
suppressMessages(library(spatstat))
setwd("Decomposition/src/")
source("func.R")
##  Load scRNA-seq & ST data
####  ST data
{
# ST_data <- readRDS("../data/UhOVC1/UhOVC1_Seurat.rds")
ST_data <- readRDS("../data/UhOVC5/UhOVC5_Seurat.rds")
SpatialFeaturePlot(ST_data, features = "nCount_SCT")
# SpatialFeaturePlot(ST_data, features = "nCount_Spatial") + theme(legend.position = "right")
ST_data <- AddMetaData(ST_data, "imagerow",
metadata = ST_data@images[["UhOVC5"]]@coordinates$imagerow)
ST_data <- AddMetaData(ST_data, "imagecol",
metadata = ST_data@images[["UhOVC5"]]@coordinates$imagecol)
SpatialDimPlot(ST_data, cells.highlight = WhichCells(ST_data,
expression = imagecol > 7000 & imagecol < 12000))
SpatialDimPlot(ST_data, cells.highlight = WhichCells(ST_data,
expression = imagerow > 10000 & imagerow < 15000))
ST_data_raw <- ST_data
}
{
######### UhOVC1 sub-region
# ST_data <- subset(ST_data, imagecol < 15000 | imagecol > 23500, invert = TRUE)
# ST_data <- subset(ST_data, imagerow < 15500 | imagerow > 24000, invert = TRUE)
######### UhOVC5 sub-region
ST_data <- subset(ST_data, imagecol < 7000 | imagecol > 12000, invert = TRUE)
ST_data <- subset(ST_data, imagerow < 10000 | imagerow > 15000, invert = TRUE)
SpatialFeaturePlot(ST_data, features = "nCount_Spatial") + theme(legend.position = "right")
ST_data <- FindVariableFeatures(ST_data, selection.method = "vst", nfeatures = 2000)
ST_data_count <- GetAssayData(ST_data)
rownames(ST_data_count) <- sub("-", "_", rownames(ST_data_count))
}
##  Feature selection: markers, or high expression genes
{
# mdl <- names(sort(rowSums(ST_data_count), decreasing = T))
# mdl <- mdl[1:500]
########  Load markers
##  State markers, may use later
module_mat <- read.table("../data/Module_gene_list.txt", sep = "\t", header = T)
##  Cell type marker
marker_mat <- read.table("../data/Markers/scRNA_population_marker.txt", sep = "\t")
marker_mat <- marker_mat %>%
filter(p_val_adj < 0.01)
rownames(marker_mat) <- sub("-", "_", rownames(marker_mat))
marker_mat$gene <- sub("-", "_", marker_mat$gene)
marker_mat$gene <- as.factor(marker_mat$gene)
marker_list <- marker_mat %>%
filter(cluster %in% c("Malignant")) %>%
select(gene)
}
##  Moran's I
{
ST_complete_data <- as.data.frame(t(as.matrix(ST_data_count)))
MI_mat <- read.table("../data/OVCA3_processed/Moran's I.txt", sep = "\t")
MI_mat$adj.p <- MI_mat$p.value * nrow(MI_mat)
MI_mat$adj.p[which(MI_mat$adj.p >= 1)] <- 1
MI_mat$adj.p[which(MI_mat$adj.p < 1e-12)] <- 1e-12
MI_mat$Significance <- as.factor(as.numeric(MI_mat$adj.p < 0.01))
##  Sparsity
MI_mat$Sparsity <- apply(ST_complete_data, 2, function(x){sum(x == 0) / length(x)})
##  Mean Expression
MI_mat$MeanExpr <- apply(ST_complete_data, 2, mean)
}
##  Filter the data based on features
{
ST_impute_data <- ST_data_count[intersect(module_mat$Gene_ID, rownames(ST_data_count)),]
ST_impute_data <- as.data.frame(t(as.matrix(ST_impute_data)))
marker_w_moran <- intersect(colnames(ST_impute_data),
rownames(MI_mat %>% filter(Significance == 1) %>% filter(Sparsity < 0.5)))
MI_filtered_module_gene <- module_mat[which(module_mat$Gene_ID %in% marker_w_moran),]
ST_impute_data <- ST_impute_data[,marker_w_moran]
# write.table(apply(ST_impute_data, 2, function(x){x / sum(x)}),
#             "../data/OVCA3_processed/OVCA3_Spot_expr.txt", sep = "\t", quote = F)
}
##  Coordinates
{
coordinates_tmp <- read.table("../Data/UhOVC5/spatial/tissue_positions_list.csv",
header = F,
sep = ",",
stringsAsFactors = F)
coordinates <- coordinates_tmp[,5:6]
rownames(coordinates) <- coordinates_tmp[,1]
colnames(coordinates) <- c("imagerow", "imagecol")
coordinates <- coordinates[rownames(ST_impute_data),]
coordinates$imagerow <- min(coordinates$imagerow) + max(coordinates$imagerow) - coordinates$imagerow
um_scale <- 55 / 210.06
coordinates <- coordinates * um_scale
}
###########     Kriging     ###########
tmp <- SpatialKriging(spatial.data = ST_impute_data,
spatial.coord = coordinates,
gene.id = "IGFBP5",
save.plot = F)
View(tmp)
setwd("../../CancerAbstract/")
devtools::document()
devtools::document()
cosine(1:3, 4:6)
devtools::document()
devtools::document()
